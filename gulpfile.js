// Generated by CoffeeScript 1.12.7
var Chalk, autoprefixer, babel, cleanCSS, coffee, coffeeToJs, color_rgba_fallback, gulp, less, lessToJs, nodemon, opacity, pixrem, plumber, postcss, processors, pseudoelements, uglify, vmin, watch, watchCoffee, watchJS, watchLess, will_change;

Chalk = require('chalk');

gulp = require('gulp');

plumber = require('gulp-plumber');

coffee = require('gulp-coffee');

watch = require('gulp-watch');

babel = require("gulp-babel");

uglify = require('gulp-uglify');

nodemon = require('gulp-nodemon');

less = require('gulp-less');

cleanCSS = require('gulp-clean-css');

autoprefixer = require('gulp-autoprefixer');

postcss = require('gulp-postcss');

color_rgba_fallback = require('postcss-color-rgba-fallback');

opacity = require('postcss-opacity');

pseudoelements = require('postcss-pseudoelements');

vmin = require('postcss-vmin');

pixrem = require('pixrem');

will_change = require('postcss-will-change');

processors = [will_change, color_rgba_fallback, opacity, pseudoelements, vmin, pixrem];

coffeeToJs = function(src, dest) {
  console.log("complie " + src);
  if (dest == null) {
    dest = './';
  }
  return gulp.src(src).pipe(plumber()).on('error', console.log).pipe(coffee({
    bare: true
  })).pipe(babel()).pipe(uglify()).pipe(gulp.dest(dest));
};

watchCoffee = function(src, dest) {
  if (dest == null) {
    dest = './';
  }
  return gulp.src(src).pipe(watch(src)).pipe(plumber()).on('error', console.log).pipe(coffee({
    bare: true
  })).pipe(babel()).pipe(uglify()).pipe(gulp.dest(dest));
};

gulp.task('coffee', function() {
  return coffeeToJs('./Code/*.coffee', './assets/js');
});

lessToJs = function(src, dest) {
  console.log("complie " + src);
  if (dest == null) {
    dest = './';
  }
  return gulp.src(src).pipe(plumber()).on('error', console.log).pipe(less()).pipe(autoprefixer()).pipe(postcss(processors)).pipe(cleanCSS()).pipe(gulp.dest(dest));
};

watchLess = function(src, dest) {
  if (dest == null) {
    dest = './';
  }
  return gulp.src(src).pipe(watch(src)).pipe(plumber()).on('error', console.log).pipe(less()).pipe(cleanCSS()).pipe(autoprefixer()).pipe(postcss(processors)).pipe(gulp.dest(dest));
};

gulp.task('less', function() {
  return lessToJs('./less/**/*.*', './assets/css');
});

watchJS = function(src, dest) {
  if (dest == null) {
    dest = './assets/js';
  }
  return gulp.src(src).pipe(watch(src)).pipe(plumber()).on('error', console.log).pipe(babel()).pipe(uglify()).pipe(gulp.dest(dest));
};

gulp.task('watch', function() {
  watchCoffee('./Code/*.coffee', './assets/js');
  watchLess('./less/**/*.*', './assets/css');
  return watchJS('./Code/*.js', './assets/js');
});

gulp.task('selfWatch', function() {
  var restart;
  restart = function() {
    console.log(Chalk.green.bold('gulpfile changed and restarted'));
    coffeeToJs('./gulpfile.coffee');
    return setTimeout(function() {
      require('child_process').spawn('cmd.exe', ['-c gulp'], {
        stdio: 'inherit'
      });
      return process.exit(0);
    }, 600);
  };
  return watch('./gulpfile.coffee', restart).on('error', function(e) {
    return console.log(Chalk.red.blod(e.message));
  });
});

gulp.task('default', function() {
  gulp.start('web');
  gulp.start('watch');
  return gulp.start('selfWatch');
});

gulp.task('build', function() {
  gulp.start('watch');
  return gulp.start('selfWatch');
});

gulp.task('web', ['nodemon'], function() {
  var browserSync;
  browserSync = require('browser-sync').create();
  return browserSync.init(null, {
    proxy: "http://localhost:5000",
    files: ["views/*.*", "assets/**/*.*"],
    browser: "ff",
    port: 7000
  });
});

gulp.task('nodemon', ['coffee', 'less'], function(cb) {
  process.env.ENV = 'localWeb';
  return nodemon({
    script: 'main.js',
    watch: ['app.coffee', 'app.js', "routes/"],
    ignore: ["code/"]
  }).once('start', cb);
});

gulp.task('test', function() {
  process.env.ENV = 'development';
  return nodemon({
    script: 'main.js',
    watch: ['app.coffee', 'app.js', "routes/"],
    ignore: ["code/"]
  });
});
